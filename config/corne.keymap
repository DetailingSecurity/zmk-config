/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define default_layer 0
#define lower_layer 1
#define raise_layer 2
#define adjust_layer 3
/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | DEL |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  | ; : | ' " |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   | , < | . > | / ? | ENT |
//                    | GUI | LWR | SPC |   | BKSP| RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp DEL
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RET
                  &kp LGUI &mo 1 &kp SPACE   &kp BKSP &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  1 !  | 2 @ | 3 # | 4 $ | 5 %   |   |  6 ^ | 7 & |  8 * | 9 ( | 0 )   |  DEL  |
// | BT1  | BT2   | BT3 | BT4 | BT5 | BTCLR |   | LFT | UP   | RGT  |     | PG_UP |       |
// | SHFT |       |     |     |     |       |   |     | DOWN |      | END | PG_DN |  ESC  |
//                      | GUI |     | SPC   |   | ENT |      | ALT  |
                        bindings = <
   &kp ESC &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp N6   &kp N7   &kp N8    &kp N9     &kp N0 &kp DEL
&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR    &kp LEFT &kp UP &kp RIGHT &trans &kp PG_UP &trans
&kp LSHFT &trans &trans &trans &trans &trans &trans   &kp DOWN &trans    &kp END    &kp PG_DN  &bt ESC
                &kp LGUI &trans &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

#                raise_layer {
#// -----------------------------------------------------------------------------------------
#// |  F1  |  F2 |  F3 |  F4 |  F5 | F6  |   |  F7 |  F8 |  F9 | F10 | F11 |  F12 |
#// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
#// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
#//                    | GUI |     | SPC |   | ENT |     | ALT |
#                        bindings = <
#   &kp F1  &kp F2 &kp F3 &kp F4 &kp F5 &kp F6   &kp F7 &kp F8  &kp F9 &kp F10 &kp F11 &kp F12
#   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT &kp RBKT &kp BSLH &kp GRAVE
#   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC &kp RBRC &kp PIPE &kp TILDE
                    	     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
};
